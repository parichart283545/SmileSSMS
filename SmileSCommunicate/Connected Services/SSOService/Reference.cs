//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmileSCommunicate.SSOService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MenuListByRoles", Namespace="http://schemas.datacontract.org/2004/07/SmileSLogin.Models")]
    [System.SerializableAttribute()]
    public partial class MenuListByRoles : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ControllerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IconClassNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> MainMenuIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MenuIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SortOrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string projectnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Controller {
            get {
                return this.ControllerField;
            }
            set {
                if ((object.ReferenceEquals(this.ControllerField, value) != true)) {
                    this.ControllerField = value;
                    this.RaisePropertyChanged("Controller");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Detail {
            get {
                return this.DetailField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailField, value) != true)) {
                    this.DetailField = value;
                    this.RaisePropertyChanged("Detail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IconClassName {
            get {
                return this.IconClassNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IconClassNameField, value) != true)) {
                    this.IconClassNameField = value;
                    this.RaisePropertyChanged("IconClassName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> MainMenuId {
            get {
                return this.MainMenuIdField;
            }
            set {
                if ((this.MainMenuIdField.Equals(value) != true)) {
                    this.MainMenuIdField = value;
                    this.RaisePropertyChanged("MainMenuId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MenuId {
            get {
                return this.MenuIdField;
            }
            set {
                if ((this.MenuIdField.Equals(value) != true)) {
                    this.MenuIdField = value;
                    this.RaisePropertyChanged("MenuId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryString {
            get {
                return this.QueryStringField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryStringField, value) != true)) {
                    this.QueryStringField = value;
                    this.RaisePropertyChanged("QueryString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SortOrder {
            get {
                return this.SortOrderField;
            }
            set {
                if ((this.SortOrderField.Equals(value) != true)) {
                    this.SortOrderField = value;
                    this.RaisePropertyChanged("SortOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string projectname {
            get {
                return this.projectnameField;
            }
            set {
                if ((object.ReferenceEquals(this.projectnameField, value) != true)) {
                    this.projectnameField = value;
                    this.RaisePropertyChanged("projectname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SSOService.ISSOService")]
    public interface ISSOService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSOService/GetRoleByUserName", ReplyAction="http://tempuri.org/ISSOService/GetRoleByUserNameResponse")]
        string GetRoleByUserName(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSOService/GetRoleByUserName", ReplyAction="http://tempuri.org/ISSOService/GetRoleByUserNameResponse")]
        System.Threading.Tasks.Task<string> GetRoleByUserNameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSOService/ValidateKey", ReplyAction="http://tempuri.org/ISSOService/ValidateKeyResponse")]
        bool ValidateKey(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSOService/ValidateKey", ReplyAction="http://tempuri.org/ISSOService/ValidateKeyResponse")]
        System.Threading.Tasks.Task<bool> ValidateKeyAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSOService/LogOut", ReplyAction="http://tempuri.org/ISSOService/LogOutResponse")]
        void LogOut(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSOService/LogOut", ReplyAction="http://tempuri.org/ISSOService/LogOutResponse")]
        System.Threading.Tasks.Task LogOutAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSOService/GetMenuList", ReplyAction="http://tempuri.org/ISSOService/GetMenuListResponse")]
        SmileSCommunicate.SSOService.MenuListByRoles[] GetMenuList(string username, string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSOService/GetMenuList", ReplyAction="http://tempuri.org/ISSOService/GetMenuListResponse")]
        System.Threading.Tasks.Task<SmileSCommunicate.SSOService.MenuListByRoles[]> GetMenuListAsync(string username, string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSOService/DefaultExpireTokenDays", ReplyAction="http://tempuri.org/ISSOService/DefaultExpireTokenDaysResponse")]
        int DefaultExpireTokenDays();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSOService/DefaultExpireTokenDays", ReplyAction="http://tempuri.org/ISSOService/DefaultExpireTokenDaysResponse")]
        System.Threading.Tasks.Task<int> DefaultExpireTokenDaysAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISSOServiceChannel : SmileSCommunicate.SSOService.ISSOService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SSOServiceClient : System.ServiceModel.ClientBase<SmileSCommunicate.SSOService.ISSOService>, SmileSCommunicate.SSOService.ISSOService {
        
        public SSOServiceClient() {
        }
        
        public SSOServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SSOServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SSOServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SSOServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetRoleByUserName(string username) {
            return base.Channel.GetRoleByUserName(username);
        }
        
        public System.Threading.Tasks.Task<string> GetRoleByUserNameAsync(string username) {
            return base.Channel.GetRoleByUserNameAsync(username);
        }
        
        public bool ValidateKey(string key) {
            return base.Channel.ValidateKey(key);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateKeyAsync(string key) {
            return base.Channel.ValidateKeyAsync(key);
        }
        
        public void LogOut(string key) {
            base.Channel.LogOut(key);
        }
        
        public System.Threading.Tasks.Task LogOutAsync(string key) {
            return base.Channel.LogOutAsync(key);
        }
        
        public SmileSCommunicate.SSOService.MenuListByRoles[] GetMenuList(string username, string projectName) {
            return base.Channel.GetMenuList(username, projectName);
        }
        
        public System.Threading.Tasks.Task<SmileSCommunicate.SSOService.MenuListByRoles[]> GetMenuListAsync(string username, string projectName) {
            return base.Channel.GetMenuListAsync(username, projectName);
        }
        
        public int DefaultExpireTokenDays() {
            return base.Channel.DefaultExpireTokenDays();
        }
        
        public System.Threading.Tasks.Task<int> DefaultExpireTokenDaysAsync() {
            return base.Channel.DefaultExpireTokenDaysAsync();
        }
    }
}
